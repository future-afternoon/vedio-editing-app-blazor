@page "/Video_Editor"
@using FFmpegBlazor
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime Runtime
@implements IDisposable




<br />

<PageTitle>Convert MP4 to MP3</PageTitle>
<br />

<div class="centered-container">
        <br />
    <br />

    <br />
    <br />
    <h1>Convert MP4 to MP3</h1>
    Extract audio from an MP4 video and create an MP3 audio file.
    <br />
    <br />
    <div>
        <label for="videoFile">Video file:</label>
        <InputFile id="videoFile" OnChange="LoadVideoFile" />
    </div>
    <br />

    <video width="1080" autoplay controls src="@videoInputUrl" style="max-width: 100%; height: auto;" />
    <br />
    <br />
  <div>  <input type="checkbox" @bind-value="@download" /> Download Output File
        <br />
    </div>
    
    <button class="btn btn-primary" @onclick="Process">Convert MP4 to MP3</button>
    <br />
    <br />
    <audio controls src="@audioOutputUrl" />
</div>

<br />
<Logger LogMessages="@logMessages" Progress="@progressMessage" Rows="10" />



@code {
    FFMPEG? ffMpeg;
    byte[]? videoBuffer;
    string? videoInputUrl = string.Empty;
    string audioOutputUrl = string.Empty;
    string logMessages = string.Empty;
    string progressMessage = string.Empty;
    bool download = false;
    const string inputFile = "input.mp4";
    const string outputFile = "output.mp3";

    protected override async Task OnInitializedAsync()
    {
        // Wire-up events
        if (FFmpegFactory.Runtime == null)
        {
            FFmpegFactory.Logger += LogToConsole;
            FFmpegFactory.Progress += ProgressChange;
        }

        // Initialize Library
        await FFmpegFactory.Init(Runtime);
    }

    private async void LoadVideoFile(InputFileChangeEventArgs v)
    {
        // Clear logs and progress
        logMessages = string.Empty;
        progressMessage = string.Empty;

        // Get the first file from input selection
        var file = v.GetMultipleFiles()[0];

        // Maximum size for a file that can be read
        int maxSize = 100000000;

        // Read all bytes
        using var stream = file.OpenReadStream(maxSize);
        videoBuffer = new byte[file.Size];

        // Read all bytes
        await stream.ReadAsync(videoBuffer);

        // Create a video link from the buffer so that the video can be played
        videoInputUrl = FFmpegFactory.CreateURLFromBuffer(videoBuffer, inputFile, file.ContentType);

        // Re-render the DOM
        StateHasChanged();
    }

    private async void Process()
    {
        // Create an instance of FFmpeg
        ffMpeg = FFmpegFactory.CreateFFmpeg(new FFmpegConfig() { Log = true });

        // Download all dependencies from the CDN
        await ffMpeg.Load();

        if (!ffMpeg.IsLoaded) return;

        // Write the buffer to in-memory files (special emscripten files,
        // FFmpegwasm only interacts with this file)
        ffMpeg.WriteFile(inputFile, videoBuffer);

        // Pass CLI arguments here equivalent to ffmpeg -i inputFile.mp4 outputFile.mp3
        await ffMpeg.Run("-i", inputFile, outputFile);

        // Delete the in-memory file
        ffMpeg.UnlinkFile(inputFile);
    }

    private async void ProgressChange(Progress message)
    {
        // Display progress % (0-1)
        // Cap the progress as it doesn't always report (0-1)
        var progressRatio =
            message.Ratio <= 0 ? 0 : message.Ratio >= 100 ? 1 : message.Ratio;
        progressMessage = $"Progress: {progressRatio.ToString("P2")}";

        Console.WriteLine(progressMessage);
        LogToUi(progressMessage);

        // If FFmpeg processing is complete, generate a media URL so that it can be
        // played and/or downloaded
        if (message.Ratio == 1)
        {
            progressMessage = $"Progress: 100%";

            // Get a bufferPointer from C WASM to C#
            var res = await ffMpeg!.ReadFile(outputFile);

            // Generate a URL from the file bufferPointer
            audioOutputUrl = FFmpegFactory.CreateURLFromBuffer(res, outputFile, "audio/mp3");

            // Download the file if required
            if (download)
            {
                FFmpegFactory.DownloadBufferAsFile(res, outputFile, "audio/mp3");
            }

            // Re-render the DOM
            StateHasChanged();
        }
    }

    private void LogToConsole(Logs message)
    {
        var logMessage = $"{message.Type} {message.Message}";
        Console.WriteLine(logMessage);
        LogToUi(logMessage);
    }

    private void LogToUi(string message)
    {
        logMessages += $"{message}\r\n";
        // Re-render the DOM
        StateHasChanged();
    }

    public void Dispose()
    {
        FFmpegFactory.Logger -= LogToConsole;
        FFmpegFactory.Progress -= ProgressChange;
    }
}
